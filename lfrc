# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map Q quit

# ----------
# -> to open
# a to mkdir
# s to rename
# d to delete
# ----------

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# open the files with the right tools
cmd open &{{
  set -f
  case $f in
    *.mq5|*.mqh|*.mqproj|*.set|*.tpl) lf -remote "send $id \$vim \$fx";;
    *.root) ~/.config/lf/r1_runroot.sh $f;;
    #*.tex) texmaker -n $f;;
    #*.jpg|*.JPG|*.jpeg|*.JPEG|*.png|*.PNG|*.gif|*.GIF|*.bmp|*.BMP|*.tiff|*.TIFF|*.tif|*.TIF|*s.webp|*.svg|*.ico|*.xcf) sxiv $f;;
    *.pdf|*.PDF|*.ps|*.xps) firefox --new-window $f &;;
    #*.stl) paraview $f;;
    #*.torrent) qbittorrent $f;;
    *)
      case $(file --mime-type -Lb $f) in
        text/x-tex) lf -remote "send $id \$texmaker -n \$fx";;
        text/*) lf -remote "send $id \$vim \$fx";;
        image/*) sxiv $f &;;
        video/*) lf -remote "send $id \$vlc \$fx > /dev/null 2>&1";;
        audio/*) lf -remote "send $id \$vlc --audio-visual glspectrum \$fx > /dev/null 2>&1";;
        #application/pdf) firefox --new-window $f &;;
        application/x-bittorrent) lf -remote "send $id \$qbittorrent \$fx > /dev/null 2>&1";;
        #application/octet-stream) lf -remote "send $id \$paraview \$fx > /dev/null 2>&1";;
        *) lf -remote "send $id \$vim \$fx";; # for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
      esac
      ;;
  esac
}}

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map s push :rename<space>

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "Delete $fx? [d]"
    read ans
    [ "$ans" = "d" ] && rm -rf $fx
}}
map d delete

# make sure trash folder exists
# move current file or selected files to trash folder
cmd trash %set -f; mv $fx ~/.trash
map <delete> trash

cmd operate ${{
    st
}}
map f operate

cmd helpme ${{
    st -e bash -c 'echo -ne "lf config help:\n  q: quit\n  a: mkdir\n  s: rename\n  d: delete\n  f: operate\n  h: help\n  ->: open\n  <delete>: mv to ~/.trash\n"; read -n 1 -s -r -p "Press any key to close ..."'
}}
map h helpme

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
